{"ast":null,"code":"import{useEffect,useRef}from'react';export function usePerformanceMonitor(componentName){const startTimeRef=useRef(performance.now());const mountTimeRef=useRef(0);useEffect(()=>{// Component mounted\nmountTimeRef.current=performance.now();const loadTime=mountTimeRef.current-startTimeRef.current;// Log initial load performance\nconst metrics={loadTime,renderTime:0,componentName,timestamp:Date.now()};logPerformanceMetrics(metrics);return()=>{// Component unmounted\nconst unmountTime=performance.now();const totalRenderTime=unmountTime-mountTimeRef.current;const finalMetrics={loadTime,renderTime:totalRenderTime,componentName,timestamp:Date.now()};logPerformanceMetrics(finalMetrics);};},[componentName]);const logPerformanceMetrics=metrics=>{// In development, log to console\nif(process.env.NODE_ENV==='development'){console.log(\"\\uD83D\\uDE80 Performance [\".concat(metrics.componentName,\"]:\"),{loadTime:\"\".concat(metrics.loadTime.toFixed(2),\"ms\"),renderTime:\"\".concat(metrics.renderTime.toFixed(2),\"ms\"),timestamp:new Date(metrics.timestamp).toISOString()});}// In production, you might want to send to analytics\nif(process.env.NODE_ENV==='production'){// Example: Send to analytics service\n// analytics.track('component_performance', metrics);\n// Or send to your own monitoring endpoint\n// fetch('/api/metrics', {\n//   method: 'POST',\n//   headers: { 'Content-Type': 'application/json' },\n//   body: JSON.stringify(metrics)\n// }).catch(console.error);\n}// Store in localStorage for debugging (optional)\ntry{const existingMetrics=JSON.parse(localStorage.getItem('performanceMetrics')||'[]');const updatedMetrics=[...existingMetrics,metrics].slice(-100);// Keep last 100 entries\nlocalStorage.setItem('performanceMetrics',JSON.stringify(updatedMetrics));}catch(error){console.warn('Failed to store performance metrics:',error);}};// Return a function to manually track operations\nconst trackOperation=operationName=>{const startTime=performance.now();return()=>{const endTime=performance.now();const duration=endTime-startTime;logPerformanceMetrics({loadTime:0,renderTime:duration,componentName:\"\".concat(componentName,\".\").concat(operationName),timestamp:Date.now()});};};return{trackOperation};}// Web Vitals monitoring (optional - requires web-vitals package)\nexport function useWebVitals(){useEffect(()=>{// Check if web-vitals is available\ntry{// Only import if package is available\nconst webVitals=require('web-vitals');if(webVitals){webVitals.getCLS(console.log);webVitals.getFID(console.log);webVitals.getFCP(console.log);webVitals.getLCP(console.log);webVitals.getTTFB(console.log);}}catch(error){console.log('Web Vitals package not installed - install with: npm install web-vitals');}},[]);}// Hook to track API call performance\nexport function useApiPerformance(){const trackApiCall=function(url){let method=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'GET';const startTime=performance.now();return(success,statusCode)=>{const endTime=performance.now();const duration=endTime-startTime;const metrics={url,method,duration,success,statusCode,timestamp:Date.now()};if(process.env.NODE_ENV==='development'){console.log(\"\\uD83C\\uDF10 API Call [\".concat(method,\" \").concat(url,\"]:\"),{duration:\"\".concat(duration.toFixed(2),\"ms\"),success,statusCode});}// Store API metrics\ntry{const existingMetrics=JSON.parse(localStorage.getItem('apiMetrics')||'[]');const updatedMetrics=[...existingMetrics,metrics].slice(-50);// Keep last 50 API calls\nlocalStorage.setItem('apiMetrics',JSON.stringify(updatedMetrics));}catch(error){console.warn('Failed to store API metrics:',error);}};};return{trackApiCall};}","map":{"version":3,"names":["useEffect","useRef","usePerformanceMonitor","componentName","startTimeRef","performance","now","mountTimeRef","current","loadTime","metrics","renderTime","timestamp","Date","logPerformanceMetrics","unmountTime","totalRenderTime","finalMetrics","process","env","NODE_ENV","console","log","concat","toFixed","toISOString","existingMetrics","JSON","parse","localStorage","getItem","updatedMetrics","slice","setItem","stringify","error","warn","trackOperation","operationName","startTime","endTime","duration","useWebVitals","webVitals","require","getCLS","getFID","getFCP","getLCP","getTTFB","useApiPerformance","trackApiCall","url","method","arguments","length","undefined","success","statusCode"],"sources":["C:/Users/michaela/service-management-app/frontend/src/hooks/usePerformanceMonitor.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\r\n\r\ninterface PerformanceMetrics {\r\n  loadTime: number;\r\n  renderTime: number;\r\n  componentName: string;\r\n  timestamp: number;\r\n}\r\n\r\nexport function usePerformanceMonitor(componentName: string) {\r\n  const startTimeRef = useRef<number>(performance.now());\r\n  const mountTimeRef = useRef<number>(0);\r\n\r\n  useEffect(() => {\r\n    // Component mounted\r\n    mountTimeRef.current = performance.now();\r\n    const loadTime = mountTimeRef.current - startTimeRef.current;\r\n\r\n    // Log initial load performance\r\n    const metrics: PerformanceMetrics = {\r\n      loadTime,\r\n      renderTime: 0,\r\n      componentName,\r\n      timestamp: Date.now()\r\n    };\r\n\r\n    logPerformanceMetrics(metrics);\r\n\r\n    return () => {\r\n      // Component unmounted\r\n      const unmountTime = performance.now();\r\n      const totalRenderTime = unmountTime - mountTimeRef.current;\r\n\r\n      const finalMetrics: PerformanceMetrics = {\r\n        loadTime,\r\n        renderTime: totalRenderTime,\r\n        componentName,\r\n        timestamp: Date.now()\r\n      };\r\n\r\n      logPerformanceMetrics(finalMetrics);\r\n    };\r\n  }, [componentName]);\r\n\r\n  const logPerformanceMetrics = (metrics: PerformanceMetrics) => {\r\n    // In development, log to console\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.log(`üöÄ Performance [${metrics.componentName}]:`, {\r\n        loadTime: `${metrics.loadTime.toFixed(2)}ms`,\r\n        renderTime: `${metrics.renderTime.toFixed(2)}ms`,\r\n        timestamp: new Date(metrics.timestamp).toISOString()\r\n      });\r\n    }\r\n\r\n    // In production, you might want to send to analytics\r\n    if (process.env.NODE_ENV === 'production') {\r\n      // Example: Send to analytics service\r\n      // analytics.track('component_performance', metrics);\r\n      \r\n      // Or send to your own monitoring endpoint\r\n      // fetch('/api/metrics', {\r\n      //   method: 'POST',\r\n      //   headers: { 'Content-Type': 'application/json' },\r\n      //   body: JSON.stringify(metrics)\r\n      // }).catch(console.error);\r\n    }\r\n\r\n    // Store in localStorage for debugging (optional)\r\n    try {\r\n      const existingMetrics = JSON.parse(localStorage.getItem('performanceMetrics') || '[]');\r\n      const updatedMetrics = [...existingMetrics, metrics].slice(-100); // Keep last 100 entries\r\n      localStorage.setItem('performanceMetrics', JSON.stringify(updatedMetrics));\r\n    } catch (error) {\r\n      console.warn('Failed to store performance metrics:', error);\r\n    }\r\n  };\r\n\r\n  // Return a function to manually track operations\r\n  const trackOperation = (operationName: string) => {\r\n    const startTime = performance.now();\r\n    \r\n    return () => {\r\n      const endTime = performance.now();\r\n      const duration = endTime - startTime;\r\n      \r\n      logPerformanceMetrics({\r\n        loadTime: 0,\r\n        renderTime: duration,\r\n        componentName: `${componentName}.${operationName}`,\r\n        timestamp: Date.now()\r\n      });\r\n    };\r\n  };\r\n\r\n  return { trackOperation };\r\n}\r\n\r\n// Web Vitals monitoring (optional - requires web-vitals package)\r\nexport function useWebVitals() {\r\n  useEffect(() => {\r\n    // Check if web-vitals is available\r\n    try {\r\n      // Only import if package is available\r\n      const webVitals = require('web-vitals');\r\n      if (webVitals) {\r\n        webVitals.getCLS(console.log);\r\n        webVitals.getFID(console.log);\r\n        webVitals.getFCP(console.log);\r\n        webVitals.getLCP(console.log);\r\n        webVitals.getTTFB(console.log);\r\n      }\r\n    } catch (error) {\r\n      console.log('Web Vitals package not installed - install with: npm install web-vitals');\r\n    }\r\n  }, []);\r\n}\r\n\r\n// Hook to track API call performance\r\nexport function useApiPerformance() {\r\n  const trackApiCall = (url: string, method: string = 'GET') => {\r\n    const startTime = performance.now();\r\n    \r\n    return (success: boolean, statusCode?: number) => {\r\n      const endTime = performance.now();\r\n      const duration = endTime - startTime;\r\n      \r\n      const metrics = {\r\n        url,\r\n        method,\r\n        duration,\r\n        success,\r\n        statusCode,\r\n        timestamp: Date.now()\r\n      };\r\n\r\n      if (process.env.NODE_ENV === 'development') {\r\n        console.log(`üåê API Call [${method} ${url}]:`, {\r\n          duration: `${duration.toFixed(2)}ms`,\r\n          success,\r\n          statusCode\r\n        });\r\n      }\r\n\r\n      // Store API metrics\r\n      try {\r\n        const existingMetrics = JSON.parse(localStorage.getItem('apiMetrics') || '[]');\r\n        const updatedMetrics = [...existingMetrics, metrics].slice(-50); // Keep last 50 API calls\r\n        localStorage.setItem('apiMetrics', JSON.stringify(updatedMetrics));\r\n      } catch (error) {\r\n        console.warn('Failed to store API metrics:', error);\r\n      }\r\n    };\r\n  };\r\n\r\n  return { trackApiCall };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}